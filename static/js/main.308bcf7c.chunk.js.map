{"version":3,"sources":["firebase.js","components/Header.js","components/Form.js","components/PieLegend.js","components/Display.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","id","Component","Form","handleChange","event","setState","target","name","value","addChartData","e","preventDefault","database","ref","push","emotionA","percentage","state","emotionApercentage","type","emotionAtype","emotionB","emotionBpercentage","emotionBtype","emotionC","emotionCpercentage","emotionCtype","emotionPercentage","parseInt","this","className","onChange","disabled","min","max","onClick","props","scrollPage","title","tabIndex","PieLegend","emotionEntry","threeEmotions","Display","scrollDisplay","chartData","map","key","aria-label","data","color","deleteChart","href","Footer","icon","faTwitter","size","faGithub","App","emotionId","child","remove","window","scrollTo","current","offsetTop","emotions","React","createRef","on","response","newState","val","entry","reverseNewState","reverse","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.308bcf7c.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDCj77jNWipR41x8aYP-8W5WF1jjd4ZtxI\",\r\n  authDomain: \"taylor-robertson-project-five.firebaseapp.com\",\r\n  databaseURL: \"https://taylor-robertson-project-five.firebaseio.com\",\r\n  projectId: \"taylor-robertson-project-five\",\r\n  storageBucket: \"taylor-robertson-project-five.appspot.com\",\r\n  messagingSenderId: \"611253490267\",\r\n  appId: \"1:611253490267:web:04bb0ea0eb49e69396a57e\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n  render() {\r\n    \r\n    return (\r\n      \r\n      <header id=\"header\">\r\n        <h1>feels</h1>\r\n        <ul>\r\n          <li><em>Choose 3 emotions</em> that you're feeling the most right now.</li>\r\n          <li><em>Select how much (%)</em> of each emotion you're feeling.</li>\r\n          <li><em>Press Submit</em>and see your pie-chart come to life!</li>\r\n        </ul>\r\n      </header>\r\n\r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Header;","import React, { Component, Fragment } from 'react';\r\nimport firebase from '../firebase';\r\n\r\nclass Form extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      emotionAtype: \"\",\r\n      emotionBtype: \"\",\r\n      emotionCtype: \"\",\r\n      emotionApercentage: 33,\r\n      emotionBpercentage: 33,\r\n      emotionCpercentage: 34\r\n    }\r\n  }\r\n\r\n  // FORM METHODS\r\n\r\n  // HANDLE CHANGE FUNCTION - Updates state everytime a value changes in either the dropdowns or the inputs\r\n  // Adapted from Juno Bookshelf Code-along\r\n  handleChange = (event) => {\r\n\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    })\r\n\r\n  }\r\n\r\n  // ADD CHART DATA FUNCTION - Takes form input data and puts it into database\r\n  // Adapted from Juno Bookshelf Code-along\r\n  // Event Listener on Submit Button\r\n  addChartData = (e) => {\r\n\r\n    e.preventDefault();\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.push({\r\n\r\n      emotionA: {\r\n        percentage: this.state.emotionApercentage,\r\n        type: this.state.emotionAtype\r\n      },\r\n      emotionB: {\r\n        percentage: this.state.emotionBpercentage,\r\n        type: this.state.emotionBtype\r\n      },\r\n      emotionC: {\r\n        percentage: this.state.emotionCpercentage,\r\n        type: this.state.emotionCtype\r\n      }\r\n\r\n    });\r\n\r\n    this.setState({\r\n      emotionApercentage: 33,\r\n      emotionAtype: \"\",\r\n      emotionBpercentage: 33,\r\n      emotionBtype: \"\",\r\n      emotionCpercentage: 34,\r\n      emotionCtype: \"\",\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    // The total of 3 percentage inputs, with error handling for NaN\r\n    const emotionPercentage = parseInt(this.state.emotionApercentage) + parseInt(this.state.emotionBpercentage) + parseInt(this.state.emotionCpercentage) || \"Please only use numbers, my friend!\";\r\n\r\n    return(\r\n\r\n      <Fragment>\r\n        \r\n        <div className=\"wrapper\">\r\n\r\n          <main>\r\n            <form>\r\n\r\n              <h2>How's it going?</h2>\r\n\r\n              <div className=\"emotion-entry-container\">\r\n\r\n                <fieldset>\r\n                  <legend className=\"sr-only\">Emotion 1</legend>\r\n                  <div className=\"select-container\">\r\n                    <select\r\n                      name=\"emotionAtype\"\r\n                      className=\"user-entry\"\r\n                      onChange={this.handleChange}\r\n                      value={this.state.emotionAtype}\r\n                    >\r\n                      <option value=\"\" disabled>Select 1st Emotion</option>\r\n                      <option value=\"happy\">Happy</option>\r\n                      <option value=\"elated\">Elated</option>\r\n                      <option value=\"proud\">Proud</option>\r\n                      <option value=\"amazed\">Amazed</option>\r\n                      <option value=\"excited\">Excited</option>\r\n                      <option value=\"determined\">Determined</option>\r\n                      <option value=\"content\">Content</option>\r\n                      <option value=\"hopeful\">Hopeful</option>\r\n                      <option value=\"relieved\">Relieved</option>\r\n                      <option value=\"joy\">Joy</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"input-container\">\r\n                    <input\r\n                      type=\"number\"\r\n                      name=\"emotionApercentage\"\r\n                      className=\"user-entry\"\r\n                      onChange={this.handleChange}\r\n                      value={this.state.emotionApercentage}\r\n                      min=\"1\"\r\n                      max=\"98\"\r\n                    />\r\n                    <span>%</span>\r\n                  </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                  <legend className=\"sr-only\">Emotion 2</legend>\r\n                  <div className=\"select-container\">\r\n                    <select\r\n                      name=\"emotionBtype\"\r\n                      className=\"user-entry\"\r\n                      onChange={this.handleChange}\r\n                      value={this.state.emotionBtype}\r\n                    >\r\n                      <option value=\"\" disabled>Select 2nd Emotion</option>\r\n                      <option value=\"insecure\">Insecure</option>\r\n                      <option value=\"annoyed\">Annoyed</option>\r\n                      <option value=\"anxious\">Anxious</option>\r\n                      <option value=\"bored\">Bored</option>\r\n                      <option value=\"frustrated\">Frustrated</option>\r\n                      <option value=\"sad\">Sad</option>\r\n                      <option value=\"jealous\">Jealous</option>\r\n                      <option value=\"hurt\">Hurt</option>\r\n                      <option value=\"disgusted\">Disgusted</option>\r\n                      <option value=\"angry\">Angry</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"input-container\">\r\n                    <input\r\n                      type=\"number\"\r\n                      name=\"emotionBpercentage\"\r\n                      className=\"user-entry\"\r\n                      onChange={this.handleChange}\r\n                      value={this.state.emotionBpercentage}\r\n                      min=\"1\"\r\n                      max=\"98\"\r\n                    />\r\n                    <span>%</span>\r\n                  </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                  <legend className=\"sr-only\">Emotion 3</legend>\r\n                  <div className=\"select-container\">\r\n                    <select\r\n                      name=\"emotionCtype\"\r\n                      className=\"user-entry\"\r\n                      onChange={this.handleChange}\r\n                      value={this.state.emotionCtype}\r\n                    >\r\n                      <option value=\"\" disabled>Select 3rd Emotion</option>\r\n                      <option value=\"confused\">Confused</option>\r\n                      <option value=\"hungry\">Hungry</option>\r\n                      <option value=\"silly\">Silly</option>\r\n                      <option value=\"peaceful\">Peaceful</option>\r\n                      <option value=\"awed\">Awed</option>\r\n                      <option value=\"awkward\">Awkward</option>\r\n                      <option value=\"nostalgic\">Nostalgic</option>\r\n                      <option value=\"triumphant\">Triumphant</option>\r\n                      <option value=\"curious\">Curious</option>\r\n                      <option value=\"entranced\">Entranced</option>\r\n                    </select>\r\n                  </div>\r\n                  <div className=\"input-container\">\r\n                    <input\r\n                      type=\"number\"\r\n                      name=\"emotionCpercentage\"\r\n                      className=\"user-entry\"\r\n                      onChange={this.handleChange}\r\n                      value={this.state.emotionCpercentage}\r\n                      min=\"1\"\r\n                      max=\"98\"\r\n                    />\r\n                    <span>%</span>\r\n                  </div>\r\n                </fieldset>\r\n\r\n              </div>\r\n\r\n\r\n              {/* Displays total percentage of inputted values */}\r\n              <p className=\"percentage-fraction\">\r\n                = \r\n                {(emotionPercentage === 100)\r\n                  ? <span className=\"form-complete\">{emotionPercentage}%</span>\r\n                  : <span className=\"form-incomplete\">{emotionPercentage}%</span>}\r\n              </p>\r\n              \r\n              {/* Makes Submit button clickable when form is filled */}\r\n              {(emotionPercentage === 100 && this.state.emotionAtype !== \"\" && this.state.emotionBtype !== \"\" && this.state.emotionCtype !== \"\")\r\n                ? <button \r\n                    type=\"submit\" \r\n                    className=\"button\" \r\n                    onClick={(e) => {\r\n                      this.addChartData(e);\r\n                      this.props.scrollPage();\r\n                    }}\r\n                    title=\"Submit form to create pie chart\"\r\n                  >Submit</button>\r\n                : <button type=\"submit\" className=\"button disabled\" tabIndex=\"-1\">Submit</button>}\r\n\r\n            </form>\r\n\r\n          </main>\r\n\r\n        </div> {/* wrapper ends */}\r\n      \r\n      </Fragment>\r\n      \r\n\r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass PieLegend extends Component {\r\n\r\n  render() {\r\n\r\n    const { emotionA, emotionB, emotionC } = this.props.emotionEntry.threeEmotions;\r\n\r\n    return (\r\n\r\n        <ul className=\"legend-list\">\r\n\r\n          <li className=\"legend-item\">\r\n            <p className=\"emotion emotion-one\">{emotionA.type}</p>\r\n            <p className=\"percentage\">{emotionA.percentage}%</p>\r\n          </li>\r\n          <li className=\"legend-item\">\r\n            <p className=\"emotion emotion-two\">{emotionB.type}</p>\r\n            <p className=\"percentage\">{emotionB.percentage}%</p>\r\n          </li>\r\n          <li className=\"legend-item\">\r\n            <p className=\"emotion emotion-three\">{emotionC.type}</p>\r\n            <p className=\"percentage\">{emotionC.percentage}%</p>\r\n          </li>\r\n\r\n        </ul>\r\n\r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default PieLegend","import React, { Component } from 'react';\r\n// https://github.com/toomuchdesign/react-minimal-pie-chart\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport PieLegend from './PieLegend';\r\n\r\n\r\nclass Display extends Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"wrapper\">\r\n\r\n        <section className=\"display\" ref={this.props.scrollDisplay}>\r\n\r\n          <h2>many moods</h2>\r\n\r\n          {/* Loops through the emotions array that was passed down through props */}\r\n          <ul className=\"pie-display-list\">\r\n            \r\n            {this.props.chartData.map((emotionEntry) => {\r\n\r\n              const { emotionA, emotionB, emotionC } = emotionEntry.threeEmotions;\r\n              \r\n              return (\r\n\r\n                <li className=\"pie-display-item\" key={emotionEntry.id}>\r\n\r\n                  <div className=\"chart-wrapper\" aria-label={`An emotional pie-chart comprised of ${emotionA.type} (${emotionA.percentage}%), ${emotionB.type} (${emotionB.percentage}%), and ${emotionC.type} (${emotionC.percentage}%)`} >\r\n                      {/* Pre-built component from react-minimal-pie-chart library */}\r\n                      <PieChart\r\n                        // Pie Chart rendered by passing in props below\r\n                        data={[\r\n                          {\r\n                            color: \"#3F84E5\",\r\n                            title: emotionA.type,\r\n                            value: parseInt(emotionA.percentage)\r\n                          },\r\n                          {\r\n                            color: \"#960200\",\r\n                            title: emotionB.type,\r\n                            value: parseInt(emotionB.percentage)\r\n                          },\r\n                          {\r\n                            color: \"#3F784C\",\r\n                            title: emotionC.type,\r\n                            value: parseInt(emotionC.percentage)\r\n                          },\r\n                        ]}\r\n            \r\n                      />\r\n\r\n                  </div>\r\n\r\n                  <PieLegend emotionEntry={emotionEntry}/>\r\n\r\n                  <button \r\n                    className=\"button pie-display-button\"\r\n                    onClick={() => this.props.deleteChart(emotionEntry.id)}\r\n                  >\r\n                    X\r\n                  </button>\r\n\r\n                </li>\r\n\r\n              )\r\n\r\n            })}\r\n\r\n          </ul>\r\n\r\n          <a href=\"#header\" className=\"button add-another-button\" title=\"Click to be brought to the top of the page, where you can create a pie chart\">\r\n            Add Another\r\n          </a>\r\n\r\n        </section> {/* display section ends  */}\r\n\r\n      </div> // wrapper ends\r\n      \r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Display","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n\r\n    return (\r\n      <footer>\r\n        <section className=\"attributions\">\r\n\r\n          <h3>Thanks</h3>\r\n          <p>\r\n            Towards the following, I am feeling 70% grateful, 20% impressed, and 10% inspired\r\n          </p>\r\n          <ul>\r\n            <li>Pie Charts rendered by the wonderful <a href=\"https://github.com/toomuchdesign/react-minimal-pie-chart\" title=\"Visit the react-minimal-pie-chart GitHub repo\" target=\"_blank\">React Minimal Pie Chart</a> library. </li>\r\n            <li>Icons created by the awesome <a href=\"https://fontawesome.com/license\" title=\"Visit FontAwesome's licence agreement\" target=\"_blank\">Font Awesome</a>.</li>\r\n            <li>Partially inspired by Julia Dufresne's fantastic project <a href=\"https://github.com/juliadufresne/julia-dufresne-deeper\" title=\"Visit Julia Defresne's GitHub page for the project, Deeper\" target=\"_blank\">Deeper</a>.</li>\r\n          </ul>\r\n\r\n        </section>\r\n        <section className=\"me\">\r\n\r\n          <h3>Me</h3>\r\n          <nav>\r\n            <ul>\r\n              <li>\r\n\r\n                <a href=\"https://twitter.com/taylorRdev\" title=\"Click to access Taylor's Twitter page\"target=\"_blank\">\r\n                  <FontAwesomeIcon \r\n                    icon={faTwitter} \r\n                    size=\"1x\" \r\n                    className=\"social-icon\" \r\n                  />\r\n                </a>\r\n                \r\n              </li>\r\n              <li>\r\n\r\n                <a href=\"https://github.com/QuercusTaliare\" title=\"Click to access Taylor's GitHub\" target=\"_blank\">\r\n                  <FontAwesomeIcon \r\n                    icon={faGithub} \r\n                    size=\"1x\" \r\n                    className=\"social-icon\" \r\n                  />\r\n                </a>\r\n                \r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          <p>\r\n            Made with <span aria-label=\"love\">♥</span> during Juno College's <a href=\"https://junocollege.com/bootcamp\" title=\"Description of the bootcamp\" target=\"_blank\">Web Dev Bootcamp</a> | Cohort calc(30 -3)\r\n          </p>\r\n          \r\n\r\n        </section>\r\n      </footer>\r\n    )\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default Footer;","import React, { Component, Fragment } from 'react';\r\nimport firebase from './firebase.js';\r\nimport Header from './components/Header';\r\nimport Form from './components/Form';\r\nimport Display from './components/Display';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor() {\r\n\r\n    super();\r\n    this.state = {\r\n\r\n      emotions: [],\r\n      \r\n    }\r\n\r\n    // Creates reference for Display component, for scrolling\r\n    // Passed into Display component\r\n    this.scrollDisplay = React.createRef();\r\n  }\r\n\r\n  //LIFECYCLE METHODS\r\n\r\n  // Updates state everytime the database is updated\r\n  // Adapted from Juno Bookshelf Code-along\r\n  componentDidMount() {\r\n\r\n    // create a variable to store a reference to our database\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // Constantly monitor what values are in the database, and when something changes, run callback function\r\n    dbRef.on('value', (response) => {\r\n\r\n      // 1. a) Make copy of State\r\n      const newState = [];\r\n\r\n      // 1. b) Get information from database\r\n      const data = response.val();\r\n\r\n      // 2. Make changes to copy of State\r\n      for (let entry in data) {\r\n\r\n        // newState.push(data[entry]);\r\n\r\n        newState.push({\r\n          threeEmotions: data[entry],\r\n          id: entry\r\n        })\r\n\r\n      }\r\n\r\n      // Reverse, so the newest entries are displayed when rendered to page\r\n      const reverseNewState = newState.reverse();\r\n\r\n      // 3. Set State with changed copy\r\n      this.setState({ emotions: reverseNewState });\r\n\r\n    })\r\n\r\n  }\r\n\r\n  // APP METHODS\r\n\r\n  // DELETE CHART FUNCTION - Deletes a chart from the Display Component\r\n  // Adapted from Juno Bookshelf Code-along\r\n  // Called in Display component\r\n  deleteChart = (emotionId) => {\r\n    \r\n    const dbRef = firebase.database().ref();\r\n\r\n    dbRef.child(emotionId).remove();\r\n\r\n  }\r\n\r\n  // SCROLL PAGE FUNCTION - Scrolls to Display component\r\n  // Called in Form component\r\n  scrollPage = () => {\r\n    window.scrollTo(0, this.scrollDisplay.current.offsetTop)\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Fragment>\r\n\r\n        <Header />\r\n\r\n        <Form scrollPage={this.scrollPage}/>\r\n\r\n        <Display \r\n          chartData={this.state.emotions} \r\n          scrollDisplay={this.scrollDisplay}\r\n          deleteChart={this.deleteChart}\r\n        />\r\n        \r\n        <Footer />\r\n\r\n      </Fragment>\r\n    );\r\n\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />,\r\n  // </React.StrictMode>\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}